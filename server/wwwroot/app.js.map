{"version":3,"sources":["../src/app.js"],"names":["app","port","process","env","PORT","server","http","createServer","io","rooms","use","req","res","next","header","setHeader","resp","console","log","status","json","routes","IsUserInRoom","room","userId","results","users","filter","user","i","length","IsUserAlreadyInARoom","userAlreadyInARoom","on","client","payload","id","roomName","newRoom","push","name","join","sockets","in","emit","map","listen"],"mappings":"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","file":"app.js","sourcesContent":["import express from 'express';\r\nimport http from 'http';\r\nimport socketIo from 'socket.io';\r\nimport routes from './routes';\r\n\r\nconst app = express();\r\nconst port = process.env.PORT || 4001;\r\nconst server = http.createServer(app);\r\nconst io = socketIo(server);\r\n\r\nlet rooms = [];\r\n\r\napp.use(function(req,res,next){\r\n  //  console.log('client domain - ' + config.clientDomain);\r\n    res.header(\"Access-Control-Allow-Origin\", 'http://localhost:3000');\r\n    res.setHeader(\"Access-Control-Allow-Methods\", \"POST, PUT, OPTIONS, DELETE, GET\");\r\n    //res.header(\"Access-Control-Allow-Origin\", \"http://localhost\");\r\n    res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept, Authorization\");\r\n    res.header('Access-Control-Expose-Headers', 'Authorization');\r\n    res.header(\"Access-Control-Allow-Credentials\", true);\r\n    next();\r\n})\r\n\r\napp.use('/api/rooms', (req, resp) => {\r\n    console.log('rooms fetch called');\r\n    resp.status(200).json(rooms);\r\n})\r\napp.use('/api', routes);\r\n\r\nconst IsUserInRoom = (room, userId) => {\r\n    let results = room.users.filter((user, i) => {\r\n                    return user.userId === userId;\r\n                });\r\n    return results && results.length;\r\n}\r\n\r\nconst IsUserAlreadyInARoom = (rooms, userId) => {\r\n    let userAlreadyInARoom = rooms.filter((room, i) => {\r\n        return IsUserInRoom(room, userId);\r\n    });\r\n    return userAlreadyInARoom && userAlreadyInARoom.length > 0;\r\n}\r\n\r\nio.on(\"connection\", (client) => {\r\n    console.log(\"New client connected\");\r\n\r\n    client.on('create-room', (payload) => {\r\n        console.log('create room called', client.id);\r\n\r\n        if (IsUserAlreadyInARoom(rooms, client.id)) {\r\n            console.log('user already part of room: ' + userAlreadyInARoom[0].roomName);\r\n            return;\r\n        }\r\n\r\n        let newRoom = {\r\n            roomName: payload.roomName,\r\n            users: []\r\n        }\r\n        newRoom.users.push({\r\n            userId: client.id,\r\n            name: payload.name\r\n        })\r\n        rooms.push(newRoom);\r\n        client.join(newRoom.roomName);\r\n        console.log('room add');\r\n        io.sockets.in(newRoom.roomName).emit('users-list', newRoom.users);\r\n        io.emit('rooms-list', rooms);\r\n        // client.broadcast.emit('rooms-list', rooms);\r\n        //client.emit('rooms-list', rooms);\r\n    })\r\n    client.on('join-room', (payload) => {\r\n        console.log('join room called');\r\n        \r\n        if (IsUserAlreadyInARoom(rooms, client.id)) {\r\n            console.log('user already part of room: ' + userAlreadyInARoom[0].roomName);\r\n            return;\r\n        }\r\n\r\n        rooms.map((room, i) => {\r\n            if(room.roomName === payload.roomName) {\r\n                room.users.push({\r\n                    userId: client.id,\r\n                    name: payload.name\r\n                })\r\n                client.join(room.roomName);\r\n                console.log('room join');\r\n                io.sockets.in(room.roomName).emit('rooms-list', rooms);\r\n            }\r\n        })\r\n    })\r\n    client.on('move-token', () => {\r\n        console.log(\"move token\");\r\n    })\r\n    client.on('disconnect', () => {\r\n        console.log(\"Client disconnected\");\r\n    })\r\n});\r\n\r\nserver.listen(port, () => console.log(`Listening game server on port ${port}`));\r\n"]}