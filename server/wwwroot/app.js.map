{"version":3,"sources":["../src/app.js"],"names":["port","process","env","PORT","server","http","createServer","app","io","rooms","use","req","resp","console","log","status","json","routes","on","client","payload","newRoom","roomName","users","push","userId","id","name","join","sockets","in","emit","user","filteredRoom","filter","val","i","length","roomToJoin","listen"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,OAAOC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;AACA,IAAMC,SAASC,eAAKC,YAAL,CAAkBC,GAAlB,CAAf;AACA,IAAMC,KAAK,sBAASJ,MAAT,CAAX;AACA,IAAMG,MAAM,wBAAZ;;AAEA,IAAIE,QAAQ,EAAZ;;AAEAF,IAAIG,GAAJ,CAAQ,YAAR,EAAsB,UAACC,GAAD,EAAMC,IAAN,EAAe;AACjCC,YAAQC,GAAR,CAAY,oBAAZ;AACAF,SAAKG,MAAL,CAAY,GAAZ,EAAiBC,IAAjB,CAAsBP,KAAtB;AACH,CAHD;AAIAF,IAAIG,GAAJ,CAAQ,MAAR,EAAgBO,gBAAhB;;AAEAT,GAAGU,EAAH,CAAM,YAAN,EAAoB,UAACC,MAAD,EAAY;AAC5BN,YAAQC,GAAR,CAAY,sBAAZ;;AAEAK,WAAOD,EAAP,CAAU,aAAV,EAAyB,UAACE,OAAD,EAAa;AAClCP,gBAAQC,GAAR,CAAY,oBAAZ;AACA,YAAIO,UAAU;AACVC,sBAAUF,QAAQE,QADR;AAEVC,mBAAO;AAFG,SAAd;AAIAF,gBAAQE,KAAR,CAAcC,IAAd,CAAmB;AACfC,oBAAQN,OAAOO,EADA;AAEfC,kBAAMP,QAAQO;AAFC,SAAnB;AAIAlB,cAAMe,IAAN,CAAWH,OAAX;AACAF,eAAOS,IAAP,CAAYP,QAAQC,QAApB;AACAT,gBAAQC,GAAR,CAAY,UAAZ;AACAN,WAAGqB,OAAH,CAAWC,EAAX,CAAcT,QAAQC,QAAtB,EAAgCS,IAAhC,CAAqC,YAArC,EAAmDV,QAAQE,KAA3D;AACAJ,eAAOY,IAAP,CAAY,YAAZ,EAA0BtB,KAA1B;AACH,KAfD;AAgBAU,WAAOD,EAAP,CAAU,WAAV,EAAuB,UAACE,OAAD,EAAa;AAChCP,gBAAQC,GAAR,CAAY,kBAAZ;AACA,YAAIkB,OAAO;AACPP,oBAAQN,OAAOO,EADR;AAEPC,kBAAMP,QAAQO,IAFP;AAGPL,sBAAUF,QAAQE;AAHX,SAAX;AAKA,YAAIW,eAAexB,MAAMyB,MAAN,CAAa,UAACC,GAAD,EAAMC,CAAN,EAAY;AACxC,mBAAOD,IAAIb,QAAJ,KAAiBF,QAAQE,QAAhC;AACH,SAFkB,CAAnB;AAGA,YAAIW,gBAAgBA,aAAaI,MAAb,GAAsB,CAA1C,EAA6C;AACzC,gBAAIC,aAAaL,aAAa,CAAb,CAAjB;AACAK,uBAAWf,KAAX,CAAiBC,IAAjB,CAAsB;AAClBC,wBAAQN,OAAOO,EADG;AAElBC,sBAAMP,QAAQO;AAFI,aAAtB;AAIAR,mBAAOS,IAAP,CAAYU,WAAWhB,QAAvB;AACAd,eAAGqB,OAAH,CAAWC,EAAX,CAAcQ,WAAWhB,QAAzB,EAAmCS,IAAnC,CAAwC,YAAxC,EAAsDO,WAAWf,KAAjE;AACH;AACJ,KAnBD;AAoBAJ,WAAOD,EAAP,CAAU,YAAV,EAAwB,YAAM;AAC1BL,gBAAQC,GAAR,CAAY,YAAZ;AACH,KAFD;AAGAK,WAAOD,EAAP,CAAU,YAAV,EAAwB,YAAM;AAC1BL,gBAAQC,GAAR,CAAY,qBAAZ;AACH,KAFD;AAGH,CA7CD;;AA+CAV,OAAOmC,MAAP,CAAcvC,IAAd,EAAoB;AAAA,WAAMa,QAAQC,GAAR,oCAA6Cd,IAA7C,CAAN;AAAA,CAApB","file":"app.js","sourcesContent":["import express from 'express';\r\nimport http from 'http';\r\nimport socketIo from 'socket.io';\r\nimport routes from './routes';\r\n\r\nconst port = process.env.PORT || 4001;\r\nconst server = http.createServer(app);\r\nconst io = socketIo(server);\r\nconst app = express();\r\n\r\nlet rooms = [];\r\n\r\napp.use('/api/rooms', (req, resp) => {\r\n    console.log('rooms fetch called');\r\n    resp.status(200).json(rooms);\r\n})\r\napp.use('/api', routes);\r\n\r\nio.on(\"connection\", (client) => {\r\n    console.log(\"New client connected\");\r\n\r\n    client.on('create-room', (payload) => {\r\n        console.log('create room called');\r\n        let newRoom = {\r\n            roomName: payload.roomName,\r\n            users: []\r\n        }\r\n        newRoom.users.push({\r\n            userId: client.id,\r\n            name: payload.name\r\n        })\r\n        rooms.push(newRoom);\r\n        client.join(newRoom.roomName);\r\n        console.log('room add');\r\n        io.sockets.in(newRoom.roomName).emit('users-list', newRoom.users);\r\n        client.emit('rooms-list', rooms);\r\n    })\r\n    client.on('join-room', (payload) => {\r\n        console.log('join room called');\r\n        let user = {\r\n            userId: client.id,\r\n            name: payload.name,\r\n            roomName: payload.roomName\r\n        }\r\n        let filteredRoom = rooms.filter((val, i) => {\r\n            return val.roomName === payload.roomName\r\n        });\r\n        if (filteredRoom && filteredRoom.length > 0) {\r\n            let roomToJoin = filteredRoom[0];\r\n            roomToJoin.users.push({\r\n                userId: client.id,\r\n                name: payload.name\r\n            })\r\n            client.join(roomToJoin.roomName);\r\n            io.sockets.in(roomToJoin.roomName).emit('users-list', roomToJoin.users);\r\n        }\r\n    })\r\n    client.on('move-token', () => {\r\n        console.log(\"move token\");\r\n    })\r\n    client.on('disconnect', () => {\r\n        console.log(\"Client disconnected\");\r\n    })\r\n});\r\n\r\nserver.listen(port, () => console.log(`Listening game server on port ${port}`));\r\n"]}